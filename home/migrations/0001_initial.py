# Generated by Django 5.0.1 on 2024-01-12 10:38

import ckeditor_uploader.fields
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Заголовок')),
                ('title_en', models.CharField(max_length=255, null=True, verbose_name='Заголовок')),
                ('title_ru', models.CharField(max_length=255, null=True, verbose_name='Заголовок')),
                ('title_uz', models.CharField(max_length=255, null=True, verbose_name='Заголовок')),
                ('image', models.ImageField(upload_to='images/Course', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif'])], verbose_name='Изображение')),
                ('status', models.CharField(choices=[('Open', 'Ochiq'), ('Close', 'Yopiq')], default='Open', max_length=15, verbose_name='Статусы')),
                ('time', models.TimeField(blank=True, null=True, verbose_name='Время')),
                ('code', models.CharField(blank=True, max_length=1000, null=True, unique=True, verbose_name='Код')),
            ],
            options={
                'verbose_name': 'Курс',
                'verbose_name_plural': 'Курс',
            },
        ),
        migrations.CreateModel(
            name='Information',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.TimeField(blank=True, null=True, verbose_name='Время')),
                ('facebook', models.URLField(blank=True, max_length=1000, null=True, verbose_name='Фейсбук')),
                ('instagram', models.URLField(blank=True, max_length=1000, null=True, verbose_name='Инстаграм')),
                ('youtube', models.URLField(blank=True, null=True, verbose_name='Юутубе')),
                ('telegram', models.URLField(blank=True, max_length=1000, null=True, verbose_name='Телеграм')),
                ('status', models.CharField(choices=[('Open', 'Открыть'), ('Close', 'Закрыто')], default='Open', max_length=15, verbose_name='Статусы')),
                ('create_at', models.DateField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Информация',
                'verbose_name_plural': 'Информация',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_student', models.BooleanField(default=False)),
                ('full_name', models.CharField(max_length=255)),
                ('group', models.CharField(max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователь',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Code',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(blank=True, max_length=6, verbose_name='Номер')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Номер',
                'verbose_name_plural': 'Номер',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='Вопрос')),
                ('question_en', ckeditor_uploader.fields.RichTextUploadingField(null=True, verbose_name='Вопрос')),
                ('question_ru', ckeditor_uploader.fields.RichTextUploadingField(null=True, verbose_name='Вопрос')),
                ('question_uz', ckeditor_uploader.fields.RichTextUploadingField(null=True, verbose_name='Вопрос')),
                ('op1', models.CharField(max_length=200, null=True, verbose_name='Вариант-1')),
                ('op1_en', models.CharField(max_length=200, null=True, verbose_name='Вариант-1')),
                ('op1_ru', models.CharField(max_length=200, null=True, verbose_name='Вариант-1')),
                ('op1_uz', models.CharField(max_length=200, null=True, verbose_name='Вариант-1')),
                ('op2', models.CharField(max_length=200, null=True, verbose_name='Вариант-2')),
                ('op2_en', models.CharField(max_length=200, null=True, verbose_name='Вариант-2')),
                ('op2_ru', models.CharField(max_length=200, null=True, verbose_name='Вариант-2')),
                ('op2_uz', models.CharField(max_length=200, null=True, verbose_name='Вариант-2')),
                ('op3', models.CharField(max_length=200, null=True, verbose_name='Вариант-3')),
                ('op3_en', models.CharField(max_length=200, null=True, verbose_name='Вариант-3')),
                ('op3_ru', models.CharField(max_length=200, null=True, verbose_name='Вариант-3')),
                ('op3_uz', models.CharField(max_length=200, null=True, verbose_name='Вариант-3')),
                ('op4', models.CharField(max_length=200, null=True, verbose_name='Вариант-4')),
                ('op4_en', models.CharField(max_length=200, null=True, verbose_name='Вариант-4')),
                ('op4_ru', models.CharField(max_length=200, null=True, verbose_name='Вариант-4')),
                ('op4_uz', models.CharField(max_length=200, null=True, verbose_name='Вариант-4')),
                ('score', models.FloatField(verbose_name='Общий счет')),
                ('ans', models.CharField(choices=[('option1', 'Вариант-1'), ('option2', 'Вариант-2'), ('option3', 'Вариант-3'), ('option4', 'Вариант-4')], default='True', max_length=100, verbose_name='Ответ')),
                ('create_at', models.DateField(auto_now=True, verbose_name='Созданный')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.course', verbose_name='Курс')),
            ],
            options={
                'verbose_name': 'Вопрос',
                'verbose_name_plural': 'Вопрос',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Студент',
                'verbose_name_plural': 'Студент',
            },
        ),
        migrations.CreateModel(
            name='Ready',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('true_answer', models.CharField(blank=True, max_length=255, null=True, verbose_name='Ответ')),
                ('is_true', models.BooleanField(default=False, verbose_name='Правильный ответ')),
                ('is_none', models.BooleanField(default=False, verbose_name='Нет ответа')),
                ('create_at', models.DateField(auto_now=True, verbose_name='Созданный')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.course', verbose_name='Курс')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.question', verbose_name='Вопрос')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.student', verbose_name='Студент')),
            ],
            options={
                'verbose_name': 'Готовый',
                'verbose_name_plural': 'Готовый',
            },
        ),
        migrations.CreateModel(
            name='Answers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_score', models.FloatField(verbose_name='Общий счет')),
                ('create_at', models.DateTimeField(auto_now=True, verbose_name='Созданный')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.course', verbose_name='Курс')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.student', verbose_name='Студент')),
            ],
            options={
                'verbose_name': 'Ответы',
                'verbose_name_plural': 'Ответы',
            },
        ),
    ]
